using System.Net;
using System.IO;
using UnityEngine;
using System.Net.Http;
using System.Text;
using System;
using System.Threading.Tasks;
using System.Collections;

//This code was generated by Microsoft Copilot. After that, I altered it to fit to our example
public class Hue : MonoBehaviour
{
    public static Hue instance;

    private string getLightsURL = "http://10.163.65.54/api/cT9veCulwYLdWUFLanU1c1MfMGsA1NF9tkYScZFD/lights";
    //private string lamp1URL = "http://10.163.65.54/api/cT9veCulwYLdWUFLanU1c1MfMGsA1NF9tkYScZFD/lights/1/state";
    private string lamp3URL = "http://10.163.65.54/api/cT9veCulwYLdWUFLanU1c1MfMGsA1NF9tkYScZFD/lights/3/state";

    private string putBrightnessBody = "{\"on\": true, \"bri\": " + 100 + "}";

    private int brightness = 0;

    private bool coroutineShouldRun = true;



    private void Awake()
    {
        if (instance != null && instance != this)
        {
            Destroy(this.gameObject);
        }
        else
        {
            instance = this;
            DontDestroyOnLoad(gameObject);
        }
    }

    private void Start()
    {
        //Debug.Log("get Hue Bridge: ");
        //Debug.Log(HttpGet(getLightsURL));
    }


    //This code was generated by Microsoft Copilot
    public string HttpGet(string url)
    {
        HttpWebRequest request = WebRequest.Create(url) as HttpWebRequest;
        string result = null;

        using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
        {
            StreamReader reader = new StreamReader(response.GetResponseStream());
            result = reader.ReadToEnd();
        }

        return result;
    }

    //This code was generated by Microsoft Copilot
    public async Task SendPutRequestAsync()
    {
        var httpClient = new HttpClient();
        var content = new StringContent(putBrightnessBody, Encoding.UTF8, "application/json");
        //Change URL here
        var response = await httpClient.PutAsync(lamp3URL, content);
        //Debug.Log(response.Content);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("PUT request was successful.");
        }
        else
        {
            Console.WriteLine("PUT request failed.");
        }
    }

    public async void changeBrightness(int brighntess)
    {
        //Debug.Log("Brightness: " + brighntess);
        if(brighntess <= 0)
        {
            String bright = 0.ToString();
            putBrightnessBody = "{\"on\": false, \"bri\": " + bright + "}";
        } else if(brighntess >= 254)
        {
            String bright = 254.ToString();
            putBrightnessBody = "{\"on\": false, \"bri\": " + bright + "}";
        }
        else
        {
            String bright = brighntess.ToString();
            putBrightnessBody = "{\"on\": true, \"bri\": " + bright + "}";
        }
        Debug.Log(putBrightnessBody);
        putBrightnessBody = putBrightnessBody.ToString();
        this.brightness = brighntess;
        await SendPutRequestAsync();
    }

    private IEnumerator asyncUpdateHueLight()
    {
        while(coroutineShouldRun)
        {
            //Debug.Log("Electricity: " + electricityGenerationFormula.instance.electricityValue);
            updateHueLight(electricityGenerationFormula.instance.electricityValue);
            yield return new WaitForSeconds(1f);
        }
    }


    public void StopHueCoroutine()
    {
        Debug.Log("Stopping Hue Coroutine");
        coroutineShouldRun = false;
        StopCoroutine(asyncUpdateHueLight());
    }

    public void StartHueCoroutine()
    {
        Debug.Log("Starting Hue Coroutine");
        coroutineShouldRun = true;
        StartCoroutine(asyncUpdateHueLight());
    }

    private void updateHueLight(float brighntess)
    {
        //int bri = getBrightnessFromElectricity(brighntess);
        int bri = getDifferentBrightnessFromElectricity(brighntess);
        changeBrightness(bri);
    }

    private int getBrightnessFromElectricity(float electricity)
    {
        //Debug.Log("Check electricity: " + electricity);
        if(electricity < 0.01f)
        {
            //Debug.Log("Too small");
            return 0;
        } else if (electricity > 1.4f)
        {
            //Debug.Log("Too big");
            return 254;
        } else
        {
            //Debug.Log("Just enough");
            int output = (int) (electricity * 300f);

            return output;
        }
    }

    private int getDifferentBrightnessFromElectricity(float electricity)
    {
        if (electricity < 20f)
        {
            //Debug.Log("Too small");
            return 0;
        }
        else if (electricity > 440f)
        {
            //Debug.Log("Too big");
            return 254;
        }
        else if( electricity >= 20 && electricity <= 150)
        {
            int output = (int)(electricity * 1.7f);
            return output;
        }
        else
        {
            //Debug.Log("Just enough");
            int output = (int)(electricity / 1.57f);

            return output;
        }
    }
}
